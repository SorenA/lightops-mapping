variables:
  MajorVersion: 0
  MinorVersion: 1
  PatchVersion: 0
  SemVer: $[format('{0}.{1}.{2}', variables['MajorVersion'], variables['MinorVersion'], variables['PatchVersion'])]
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    # Versioning: 1.0.0
    Version: $[format('{0}', variables['SemVer'])]
    BuildName: $[format('{0} (Build {1})', variables['Version'], variables['Build.BuildId'])]
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
    # Versioning: 1.0.0-alpha.123
    VersionName: $[format('{0}-alpha', variables['SemVer'])]
    VersionRev: $[counter(variables['VersionName'], 0)]
    Version: $[format('{0}.{1}', variables['VersionName'], variables['VersionRev'])]
    BuildName: $[format('Develop - {0} (Build {1})', variables['Version'], variables['Build.BuildId'])]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/') }}:
    # Versioning: 1.0.0-alpha.feature.branch.123
    VersionName: $[format('{0}-alpha.feature.{1}', variables['SemVer'], variables['Build.SourceBranchName'])]
    VersionRev: $[counter(variables['VersionName'], 0)]
    Version: $[format('{0}.{1}', variables['VersionName'], variables['VersionRev'])]
    BuildName: $[format('Feature - {0} (Build {1})', variables['Version'], variables['Build.BuildId'])]

name: $(BuildName)

trigger:
  branches:
    include:
      - master
      - develop
      - feature/*
  paths:
    exclude:
      - README.md
      - CHANGELOG.md

stages:
  - stage: Build
    displayName: build
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: ubuntu-18.04
        steps:
          - task: DotNetCoreCLI@2
            displayName: Dotnet restore
            inputs:
              command: restore
              projects: '**/*.csproj'
              feedsToUse: config
              nugetConfigPath: '$(System.DefaultWorkingDirectory)/nuget.config'

          - task: DotNetCoreCLI@2
            displayName: Dotnet build
            inputs:
              command: build
              projects: '**/*.csproj'

          - task: DotNetCoreCLI@2
            displayName: Dotnet pack
            inputs:
              command: pack
              packagesToPack: '**/*.csproj'
              versioningScheme: byEnvVar
              versionEnvVar: Version

          - task: PublishBuildArtifacts@1
            displayName: Publish artifacts
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: nupkg
              publishLocation: Container
              
  - stage: Release
    displayName: Release
    jobs:
      - deployment: ReleaseNuGet
        displayName: Release on NuGet.org
        environment: NuGetOrg
        pool:
          vmImage: ubuntu-18.04
        strategy:
          runOnce:
            deploy:
              steps:
                # Tag release in git
                - task: Bash@3
                  displayName: Tag version in git
                  inputs:
                    targetType: inline
                    script: |
                      git tag $(Version)
                      git push $(Version)
                      
                - task: NuGetCommand@2
                  displayName: Release on NuGet.org
                  inputs:
                    command: push
                    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
                    nuGetFeedType: external
                    publishFeedCredentials: NuGet.org
                    