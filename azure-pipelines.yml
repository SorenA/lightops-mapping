variables:
  majorVersion: 0
  minorVersion: 1
  patchVersion: 0
  version: $[format('{0}.{1}.{2}', variables.majorVersion, variables.minorVersion, variables.patchVersion)]
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    # Versioning: 1.0.0
    releaseOnNuget: true
    semVersion: $[format('{0}', variables.version)]
    buildName: $[format('{0}', variables.semVersion)]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release/') }}:
    # Versioning: 1.0.0-alpha.branch.123
    releaseOnNuget: true
    semVersionBase: $[format('{0}-alpha.{1}', variables.version, variables['Build.SourceBranchName'])]
    semVersionRev: $[counter(variables.semVersionBase, 0)]
    semVersion: $[format('{0}.{1}', variables.semVersionBase, variables.semVersionRev)]
    buildName: $[format('Release - {0}', variables.semVersion)]
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
    # Versioning: 1.0.0-develop.123
    releaseOnNuget: false
    semVersionBase: $[format('{0}-develop', variables.version)]
    semVersionRev: $[counter(variables.semVersionBase, 0)]
    semVersion: $[format('{0}.{1}', variables.semVersionBase, variables.semVersionRev)]
    buildName: $[format('Develop - {0}', variables.semVersion)]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/') }}:
    # Versioning: 1.0.0-feature.branch.123
    releaseOnNuget: false
    semVersionBase: $[format('{0}-feature.{1}', variables.version, variables['Build.SourceBranchName'])]
    semVersionRev: $[counter(variables.semVersionBase, 0)]
    semVersion: $[format('{0}.{1}', variables.semVersionBase, variables.semVersionRev)]
    buildName: $[format('Feature - {0}', variables.semVersion)]
  ${{ if eq(variables['Build.SourceBranch'], 'merge') }}: # Pull requests
    # Versioning: 1.0.0-pr.1.123
    releaseOnNuget: false
    semVersionBase: $[format('{0}-pr.{1}', variables.version, variables['System.PullRequest.PullRequestId'])]
    semVersionRev: $[counter(variables.semVersionBase, 0)]
    semVersion: $[format('{0}.{1}', variables.semVersionBase, variables.semVersionRev)]
    buildName: $[format('Pull Request - {0}', variables.semVersion)]

name: $(BuildID) - $(buildName)

trigger:
  branches:
    include:
      - master
      - develop
      - feature/*
      - release/*
  paths:
    exclude:
      - README.md
      - CHANGELOG.md
   
pr:
  branches:
    include:
      - master
      - develop
  paths:
    exclude:
      - README.md
      - CHANGELOG.md

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: ubuntu-18.04
        steps:
          - task: DotNetCoreCLI@2
            displayName: Dotnet restore
            inputs:
              command: restore
              projects: '**/*.csproj'
              feedsToUse: config
              nugetConfigPath: '$(System.DefaultWorkingDirectory)/nuget.config'

          - task: DotNetCoreCLI@2
            displayName: Dotnet build
            inputs:
              command: build
              projects: '**/*.csproj'

          - task: DotNetCoreCLI@2
            displayName: Dotnet pack
            inputs:
              command: pack
              packagesToPack: '**/*.csproj'
              versioningScheme: byEnvVar
              versionEnvVar: semVersion

          - task: PublishPipelineArtifact@1
            displayName: Publish artifact - nupkg
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifactName: nupkg
              
  - stage: Release
    displayName: Release
    condition: and(succeeded(), eq(variables.releaseOnNuget, 'true'))
    jobs:
      - deployment: ReleaseNuGet
        displayName: Release on NuGet.org
        environment: NuGetOrg
        pool:
          vmImage: ubuntu-18.04
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  persistCredentials: true
                  clean: true
                  fetchDepth: 1

                # Tag release in git
                - task: Bash@3
                  displayName: Tag version in git
                  inputs:
                    targetType: inline
                    script: |
                      git tag $(semVersion)
                      git push --tags
                      
                - task: NuGetCommand@2
                  displayName: Release on NuGet.org
                  inputs:
                    command: push
                    packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
                    nuGetFeedType: external
                    publishFeedCredentials: NuGet.org
                    